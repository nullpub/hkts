import type * as TC from "./type-classes.ts";
import type { _ } from "./hkts.ts";
import { createMonad, createPipeableMonad } from "./derivations.ts";

/***************************************************************************************************
 * @section Types
 **************************************************************************************************/

export type Task<A> = () => Promise<A>;

/***************************************************************************************************
 * @section Constructors
 **************************************************************************************************/

export const of = <A>(a: A): Task<A> => () => Promise.resolve(a);

/***************************************************************************************************
 * @section Destructors
 **************************************************************************************************/

/***************************************************************************************************
 * @section Combinators
 **************************************************************************************************/

export const delay = (ms: number) => <A>(ma: Task<A>): Task<A> => () =>
  new Promise((resolve) => {
    setTimeout(() => {
      ma().then(resolve);
    }, ms);
  });

/***************************************************************************************************
 * @section Guards
 **************************************************************************************************/

/***************************************************************************************************
 * @section Modules
 **************************************************************************************************/

export const Monad = createMonad<Task<_>>({
  of,
  chain: (fatb, ta) => () => ta().then((a) => fatb(a)()) as Promise<any>,
});

export const Applicative: TC.Applicative<Task<_>> = {
  of,
  ap: Monad.ap,
  map: Monad.map,
};

export const Apply: TC.Apply<Task<_>> = {
  ap: Monad.ap,
  map: Monad.map,
};

/***************************************************************************************************
 * @section Pipeables
 **************************************************************************************************/

export const { ap, map, join, chain } = createPipeableMonad(Monad);
